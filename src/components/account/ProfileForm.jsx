
import React, { useState } from 'react';
import { User } from '@/api/entities';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Loader2, ShieldCheck, ShieldAlert } from 'lucide-react';
import { SendEmail } from "@/api/integrations";

export default function ProfileForm({ user, onUserUpdate }) {
    const [formData, setFormData] = useState({
        nome: user.nome || '',
        sobrenome: user.sobrenome || '',
        email: user.email || '',
        telefone: user.telefone || '',
        nif: user.nif || '',
        consentimento_dados: user.consentimento_dados || false,
    });
    const [isLoading, setIsLoading] = useState(false);
    const [message, setMessage] = useState({ type: '', content: '' });

    const handleInputChange = (field, value) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        setMessage({ type: '', content: '' });
    };

    const handlePasswordReset = async () => {
        setIsLoading(true);
        setMessage({ type: '', content: '' });
        try {
            // This is a mock implementation. A real password reset link should be generated by the backend.
            await SendEmail({
                to: user.email,
                subject: "Redefinição de Senha - AmaEats",
                body: `Olá ${user.nome}, para redefinir sua senha, clique no link a seguir: [Link de Redefinição]. Se você não solicitou isso, ignore este email.`
            });
            setMessage({ type: 'success', content: 'Um email de redefinição de senha foi enviado para você.' });
        } catch (error) {
            console.error("Erro ao enviar email de redefinição:", error);
            setMessage({ type: 'error', content: 'Não foi possível enviar o email de redefinição.' });
        }
        setIsLoading(false);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.nome || !formData.sobrenome || !formData.telefone || !formData.email) {
            setMessage({ type: 'error', content: 'Por favor, preencha todos os campos obrigatórios.' });
            return;
        }
        setIsLoading(true);
        setMessage({ type: '', content: '' });
        try {
            const updatedUser = await User.updateMyUserData(formData);
            onUserUpdate(updatedUser);
            setMessage({ type: 'success', content: 'Perfil atualizado com sucesso!' });
        } catch (error) {
            console.error("Erro ao atualizar perfil:", error);
            setMessage({ type: 'error', content: 'Ocorreu um erro ao salvar seu perfil.' });
        }
        setIsLoading(false);
    };

    return (
        <Card className="border-none shadow-lg bg-white/80 backdrop-blur-sm">
            <CardHeader>
                <CardTitle>Dados Pessoais</CardTitle>
                <CardDescription>Gerencie suas informações pessoais e de contato.</CardDescription>
            </CardHeader>
            <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="grid md:grid-cols-2 gap-4">
                        <div className="space-y-1">
                            <Label htmlFor="nome">Nome *</Label>
                            <Input id="nome" value={formData.nome} onChange={e => handleInputChange('nome', e.target.value)} required className="h-12" />
                        </div>
                        <div className="space-y-1">
                            <Label htmlFor="sobrenome">Sobrenome *</Label>
                            <Input id="sobrenome" value={formData.sobrenome} onChange={e => handleInputChange('sobrenome', e.target.value)} required className="h-12" />
                        </div>
                    </div>
                    <div className="grid md:grid-cols-2 gap-4">
                        <div className="space-y-1">
                            <Label htmlFor="email">Email *</Label>
                            <Input id="email" type="email" value={formData.email} onChange={e => handleInputChange('email', e.target.value)} required className="h-12" />
                        </div>
                        <div className="space-y-1">
                            <Label htmlFor="telefone">Telefone *</Label>
                            <Input id="telefone" value={formData.telefone} onChange={e => handleInputChange('telefone', e.target.value)} required className="h-12" />
                        </div>
                    </div>
                    <div className="space-y-1">
                        <Label htmlFor="nif">NIF (Opcional)</Label>
                        <Input id="nif" value={formData.nif} onChange={e => handleInputChange('nif', e.target.value)} className="h-12" />
                    </div>

                    <div className="border-t pt-6 space-y-4">
                        <div className="space-y-1">
                            <Label>Senha</Label>
                             <p className="text-sm text-gray-500">
                                Por segurança, a alteração de senha é feita através de um link enviado para seu email.
                            </p>
                            <Button type="button" variant="outline" onClick={handlePasswordReset} disabled={isLoading} className="h-12 text-base font-medium touch-manipulation">
                                Enviar email para redefinir senha
                            </Button>
                        </div>
                    </div>

                    <div className="border-t pt-6 space-y-4">
                         <div className="flex items-start space-x-3">
                            <Switch 
                                id="consentimento_dados" 
                                checked={formData.consentimento_dados}
                                onCheckedChange={c => handleInputChange('consentimento_dados', c)}
                            />
                            <div className="grid gap-1.5 leading-none">
                                <Label htmlFor="consentimento_dados">Consentimento de Dados</Label>
                                <p className="text-sm text-gray-500">
                                    Eu concordo em salvar meus dados como endereços e formas de pagamento para facilitar compras futuras.
                                </p>
                            </div>
                        </div>
                    </div>

                    {message.content && (
                      <div className={`p-3 rounded-lg text-sm flex items-center gap-2 ${message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {message.type === 'success' ? <ShieldCheck className="w-4 h-4" /> : <ShieldAlert className="w-4 h-4" />}
                        {message.content}
                      </div>
                    )}

                    <div className="flex justify-end">
                        <Button type="submit" disabled={isLoading} className="h-12 px-8 text-base font-medium touch-manipulation">
                            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            Salvar Alterações
                        </Button>
                    </div>
                </form>
            </CardContent>
        </Card>
    );
}
